<!DOCTYPE html>
<html lang="de">
<head>
    <%- include("./partials/head", {title: "Stats"}) %>
    <style>
        .card {
            width: 100%;
        }
    </style>
</head>
<body>
    <%- include("./partials/header") %>

    <script>
        const SECOND    = 1000
        const MINUTE    = SECOND * 60
        const HOUR      = MINUTE * 60
        const DAY       = HOUR   * 24
        const WEEK      = DAY    *  7

        const SUNDAY    = 0
        const MONDAY    = 1
        const TUESDAY   = 2
        const WEDNESDAY = 3
        const THURSDAY  = 4
        const FRIDAY    = 5
        const SATURDAY  = 6

        const DAY_NAMES = [
            "Sonntag",
            "Montag",
            "Dienstag",
            "Mittwoch",
            "Donnerstag",
            "Freitag",
            "Samstag",
        ]

        function showDayPopularity(arr) {

            days = [0,0,0,0,0,0,0]
            arr.forEach(date => {
                date = new Date(date)
                days[date.getDay()] += 1
            })
            return days
        }

        function stripToDay(date) {
            date = new Date(date)
            date.setMilliseconds(0)
            date.setSeconds(0)
            date.setMinutes(0)
            date.setHours(0)
            return date
        }

        function cutIntoDays(arr) {
            var days = {}
            arr.forEach(date => {
                date = stripToDay(date)

                if(!days[date.getTime()]) {
                    days[date.getTime()] = 1
                }
                else {
                    days[date.getTime()] += 1
                }
            })
            return fillEmpties(days, DAY)
        }

        function cutIntoWeeks(arr) {
            var weeks = {}
            arr.forEach(date => {
                // set every day in a week to the same time
                date = new Date(date)
                const day = date.getDay()
                date = new Date(date.getTime() - day * DAY)
                date.setMilliseconds(0)
                date.setSeconds(0)
                date.setMinutes(0)
                date.setHours(0)

                if(!weeks[date.getTime()]) {
                    weeks[date.getTime()] = 1
                }
                else {
                    weeks[date.getTime()] += 1
                }
            })
            return fillEmpties(weeks, WEEK)
        }

        function cutIntoMonths(arr) {
            var months = {}
            arr.forEach(date => {
                // set every day in a month to the same time
                date = new Date(date)
                const monthDate = date.getDate()
                date = new Date(date.getTime() - (monthDate - 1) * DAY)
                date.setMilliseconds(0)
                date.setSeconds(0)
                date.setMinutes(0)
                date.setHours(0)
                if(!months[date.getTime()]) {
                    months[date.getTime()] = 1
                }
                else {
                    months[date.getTime()] += 1
                }
            })
            return months
        }

        function fillEmpties(object, step) {
            const keys = Object.keys(object)
            keys.sort((a, b) => {
                if (parseInt(a) < parseInt(b)) return -1
                if (parseInt(a) > parseInt(b)) return 1
                return 0
            })

            for (var i = parseInt(keys[0]); i < parseInt(keys[keys.length - 1]) + step; i += step) {
                object[i] |= 0
            }

            return object
        }

        function fromTo(object, from, to, step) {
            var stripFunction
            switch (step) {
                case DAY:
                    stripFunction = stripToDay
                    break;
                
                case WEEK:
                    stripFunction = stripToWeek
                    break;
            }

            const keys = Object.keys(object)

            const newObject = {}

            for (var i = stripFunction(from).getTime(); i < stripFunction(to).getTime() + step; i += step) {
                if (object[i]) {
                    newObject[i] = object[i]
                }
                else {
                    newObject[i] = 0
                }
            }

            return newObject

        }

        function daysInMonth(m, y){
            return m===2?y&3||!(y%25)&&y&15?28:29:30+(m+(m>>3)&1);
        }

    </script>

    <div class="container">
        <div class="row mb-2">
            <div class="card">
                <div class="card-body">
                    <canvas id="dayPop"></canvas>
                </div>
            </div>
        </div>
        <div class="row mb-2">
            <div class="card">
                <div class="card-body">
                    <label for="starting-day">Zeige die Woche ab dem</label>
                    <input type="date" id="starting-day">
                    <canvas id="days"></canvas>
                </div>
            </div>
        </div>
        <div class="row mb-2">
            <div class="card">
                <div class="card-body">
                    <canvas id="weeks"></canvas>
                </div>
            </div>
        </div>
        <div class="row mb-2">
            <div class="card">
                <div class="card-body">
                    <canvas id="months"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.0/chart.min.js" integrity="sha512-asxKqQghC1oBShyhiBwA+YgotaSYKxGP1rcSYTDrB0U6DxwlJjU59B67U8+5/++uFjcuVM8Hh5cokLjZlhm3Vg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        fetch("/me")
        .then(response => response.json())
        .then(user => {
            var dayPopCtx = document.getElementById('dayPop').getContext('2d')
            var days = showDayPopularity(user.scans)
            var dayPop = new Chart(dayPopCtx, {
                data: {
                    labels: DAY_NAMES,
                    datasets: [
                    {
                        type: "bar",
                        label: 'Scans',
                        data: days,
                    }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            })


            var daysCtx = document.getElementById('days').getContext('2d')

            const datePicker = document.getElementById("starting-day")

            // set initial value of datePicker
            datePicker.value = new Date( new Date().getTime() - (WEEK - DAY) ).toISOString().slice(0, 10)
            updateChart()


            // listen to user input and update the graph
            datePicker.addEventListener("change", () => {
                updateChart()
            })

            var daysChart

            function updateChart() {

                var days = fromTo(cutIntoDays(user.scans), new Date(datePicker.value).getTime(), new Date(datePicker.value).getTime() + (WEEK - DAY), DAY)
                
                keys = Object.keys(days).sort()
                var values = []
                var labels = []
                keys.forEach(key => {
                    values.push(days[key])
                    labels.push(new Date(parseInt(key)).toLocaleDateString("de-DE", { weekday: "short", year: "2-digit", month: "numeric", day: "numeric"}))
                })


                if (daysChart) {
                    daysChart.destroy()
                }

                daysChart = new Chart(daysCtx, {
                    data: {
                        labels: labels,
                        datasets: [
                        {
                            type: "line",
                            label: 'Scans',
                            data: values,
                            borderColor: "lightblue",
                            tension: .2
                        },
                        {
                            type: "bar",
                            label: 'Scans',
                            data: values,
                        }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                        legend: {
                            display: false
                        }
                    }
                    }
                })
            }
            
            

            var weeksCtx = document.getElementById('weeks').getContext('2d')
            var weeks = cutIntoWeeks(user.scans)

            keys = Object.keys(weeks).sort()
            var values = []
            var labels = []
            keys.forEach(key => {
                values.push(weeks[key])
                labels.push(new Date(parseInt(key)).toLocaleDateString() + " - " + new Date(parseInt(key) + 6 * DAY).toLocaleDateString())
            })

            var weeksChart = new Chart(weeksCtx, {
                data: {
                    labels: labels,
                    datasets: [
                    {
                        type: "line",
                        label: 'Scans',
                        data: values,
                        borderColor: "lightblue",
                        tension: .2
                    },
                    {
                        type: "bar",
                        label: 'Scans',
                        data: values,
                    }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            })
        })
    </script>
</body>
</html>